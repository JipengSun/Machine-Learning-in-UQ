function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 26-Apr-2018 21:24:48.
% 
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 9xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1;0.1];
  x1_step1_gain = [2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-1.9689942317236832636;-1.6280437269565499747;1.3029447183645184172;-0.52960511077463467977;-0.10593158044029334086;0.27815043886774720727;0.28498935446289058726;-0.20997892090114053665;-4.5069405427257898111;1.7609054680928892811];
  IW1_1 = [1.0586175535736308539 1.0152408443336333743 0.61560016959431873573 1.2106176228111142912 0.079852277729579645982 0.24009537407379014096 0.097414389342897228508 -0.85752960199743211156 -0.38475601498266276401;0.41051494361861623483 -0.77100542812510675095 0.37610881616761732138 -0.48243124442683893438 0.2030735453130642354 0.64588306899567848873 0.07052439864641278644 0.96474632220693823381 0.58134655131263690553;-1.7262962086901276759 -0.57523390697373777414 0.10627378322590393112 0.93639736444852694763 0.42359280883337846468 -0.31484305982093202525 -0.96624999060406913109 -0.39330789113770481258 -1.3031525823047289681;-1.0287115433990332569 -0.70410925220451370254 0.012900786689977530863 -0.66985111099373439991 0.17945389867480329715 -1.3932828038923006364 0.22702047908050729252 1.193347216581025938 0.80730399228614280194;0.091210316081964837309 0.37865619623192625642 -0.78876210851015760017 -0.13797330302998131457 0.6771909884743473329 -0.64745999032525136663 -0.63604845369174434211 0.35221203018175306632 -1.1880170048613578615;1.7724476304234091373 -0.2522494434417641429 -0.34552079541132141305 -0.043725878002972930203 0.34379419782608822143 0.48774760329220007149 1.2028522642437291523 0.96209902026864790869 0.61078493332210681555;-0.024546833267049282534 0.69685962904920784045 -1.1046619778796928912 0.057950379413252373073 0.283961743129417854 -0.66365297072223250474 -0.25229724504193190571 -0.59343473491670228892 -1.3138815247995265789;0.26150710957068512563 -1.5227408663414461198 -1.5304042806265503174 0.34661376248208031203 0.89432125060054923349 -0.18050317373411353672 0.78917939232353051526 0.40561231855425733395 1.0501565239482819614;-1.0807025745249061455 -0.26779080868207272292 -0.70452274702833461717 -1.273106262453466142 0.12002297684013840673 -1.9289977883194027175 -0.47124860535891871516 -0.51341295221205973665 -0.41042977206990671757;-0.18062383316217120455 -0.63767670929179842698 -0.65924534017819480525 0.15346778762701740462 -1.2421581462769406556 0.50583589644254023376 -1.1884008066415139293 0.91217092663692600496 0.31805538074648720404];
  
  % Layer 2
  b2 = [-0.3053698468790216336;2.0003764461528761309];
  LW2_1 = [-0.84210297893807217751 -1.0258404332304422724 1.2260634344251559735 -0.73845024519778068584 1.3916124816970822931 -0.58256668630855756863 -0.21353079087426979354 -0.320263381471030395 2.056888659288199861 0.11903702830058404682;-0.26659713141224239408 -0.41094448858279619685 -0.32806984441383729711 0.12808024531789630185 -0.44143998328316180757 0.31097052782720746578 -0.83091975824016395258 -0.95326644175132502212 -3.2091680313935642133 -1.1851940294803615661];
  
  % ===== SIMULATION ========
  
  % Dimensions
  Q = size(x1,2); % samples
  
  % Input 1
  xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
  
  % Layer 1
  a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);
  
  % Layer 2
  a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);
  
  % Output 1
  y1 = a2;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numer = exp(n);
  denom = sum(numer,1); 
  denom(denom == 0) = 1;
  a = bsxfun(@rdivide,numer,denom);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
